@model CardsAndDecks.Models.CardViewModel

@{
    ViewBag.Title = "Create";
}

<h2>
    @Model.CardName
</h2>

@if (TempData.ContainsKey("SaveResult"))
{
    <div class="alert alert-success fade in" role="alert">

        <button type="button" class="close" data-dismiss="alert">
            <span>&times;</span>
        </button>
        @TempData["SaveResult"]
    </div>
}

@using (Html.BeginForm())
{
    @Html.Hidden("TemplateId")
    @Html.Hidden("CardName")
    @Html.Hidden("CardId")
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Template: @Model.TemplateName</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    </div>

    if (Model.TemplatePropertyList != null)
    {
        <table class="table">
            <tr>
                <td>
                    @Html.DisplayFor(x => Model.TemplatePropertyList[0].PropertyName, new { @class = "form-control" })
                </td>
                <td>
                    @Html.TextBoxFor(x => Model.Values[0], new { @class = "form-control", @readonly = "readonly" })
                </td>
            </tr>
            @*<br />*@

            @for (var i = 1; i < Model.TemplatePropertyList.Count(); i++)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(x => Model.TemplatePropertyList[i].PropertyName, new { @class = "form-control" })
                    </td>

                    <td>
                        @Html.EditorFor(x => Model.Values[i], new { htmlAttributes = new { placeholder = $"{Model.TemplatePropertyList[i].PropertyType.ToString()}" } })
                    </td>
                </tr>
                @*<br />
                    <br />*@

            }
        </table>
    }
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
}




<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
